<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Demo.Text" xml:space="preserve">
    <value>The current domain is operating under a Demonstration licence.</value>
  </data>
  <data name="EnterpriseLicence.Text" xml:space="preserve">
    <value>The current installation is fully licensed under an Enterprise Licence</value>
  </data>
  <data name="ExpiredLicence.Text" xml:space="preserve">
    <value>The current trial licence period has expired.</value>
  </data>
  <data name="FaqLink.Text" xml:space="preserve">
    <value>Need more information on product licensing?  See the Licensing FAQ section for more detail.</value>
  </data>
  <data name="FaqLink.Url" xml:space="preserve">
    <value>http://www.ifinity.com.au/Products/Url_Master_DNN_SEO_Urls/details/FAQs</value>
  </data>
  <data name="InvalidLicence.Text" xml:space="preserve">
    <value>The licence keyfile for this installation is invalid or corrupted.</value>
  </data>
  <data name="Licence1.Desc" xml:space="preserve">
    <value>The single domain licence is for an installation where there is only one domain name in use.</value>
  </data>
  <data name="Licence1.LicenceLink" xml:space="preserve">
    <value>Already purchased a Single Domain licence? Click to obtain your keyfile.</value>
  </data>
  <data name="Licence1.Name" xml:space="preserve">
    <value>Single Domain Licence</value>
  </data>
  <data name="Licence1.Purchase" xml:space="preserve">
    <value>Purchase a Single Domain Licence</value>
  </data>
  <data name="Licence1.TrialLink" xml:space="preserve">
    <value>Get a free trial Single domain licence </value>
  </data>
  <data name="Licence1.Url" xml:space="preserve">
    <value>http://www.ifinity.com.au/Products/Purchase/Url_Master</value>
  </data>
  <data name="Licence3.Desc" xml:space="preserve">
    <value>A five domain licence covers up to 3 unique domain names.  If this DotNetNuke installation doesn't need all 3 domains, you can use the domains in other installations, as long as the total domains across all installations doesn't exceed 3.</value>
  </data>
  <data name="Licence3.Name" xml:space="preserve">
    <value>Three Domain Licence</value>
  </data>
  <data name="Licence3.Url" xml:space="preserve">
    <value>http://www.ifinity.com.au/Products/Purchase/Url_Master</value>
  </data>
  <data name="Licence5.Desc" xml:space="preserve">
    <value>A five domain licence covers up to 5 unique domain names.  If this DotNetNuke installation doesn't need all 5 domains, you can use the domains in other installations, as long as the total domains across all installations doesn't exceed 5.</value>
  </data>
  <data name="Licence5.LicenceLink" xml:space="preserve">
    <value>Already purchased a 5 Domain licence?  Click to obtain your keyfile.</value>
  </data>
  <data name="Licence5.Name" xml:space="preserve">
    <value>Five Domain Licence</value>
  </data>
  <data name="Licence5.Purchase" xml:space="preserve">
    <value>Purchase a Five Domain Licence</value>
  </data>
  <data name="Licence5.TrialLink" xml:space="preserve">
    <value>Get a free trial 5 domain licence</value>
  </data>
  <data name="Licence5.Url" xml:space="preserve">
    <value>http://www.ifinity.com.au/Products/Purchase/Url_Master</value>
  </data>
  <data name="LicenceDetail.Header" xml:space="preserve">
    <value>Licence Description</value>
  </data>
  <data name="LicenceFailure.Text" xml:space="preserve">
    <value>The licence file could not be read correctly.</value>
  </data>
  <data name="LicenceHost.Desc" xml:space="preserve">
    <value>A Host licence will cover unlimited domains within this DotNetNuke installation.</value>
  </data>
  <data name="LicenceHost.LicenceLink" xml:space="preserve">
    <value>Already purchased a Host licence? Click to obtain your keyfile.</value>
  </data>
  <data name="LicenceHost.Name" xml:space="preserve">
    <value>Host Licence</value>
  </data>
  <data name="LicenceHost.Purchase" xml:space="preserve">
    <value>Purchase a Host Licence</value>
  </data>
  <data name="LicenceHost.TrialLink" xml:space="preserve">
    <value>Get a free trial Host licence</value>
  </data>
  <data name="LicenceHost.Url" xml:space="preserve">
    <value>http://www.ifinity.com.au/Products/Purchase/Url_Master</value>
  </data>
  <data name="LicenceName.Header" xml:space="preserve">
    <value>Licence name</value>
  </data>
  <data name="LicenceNotFound.Text" xml:space="preserve">
    <value>No licence keyfile was found.</value>
  </data>
  <data name="LicenceRecommendations.Text" xml:space="preserve">
    <value>Based on the number of unique domains found in this installation [{0}], the best licence for your needs is shown below.  Please note if you intend to use the module on a different installation, the best licence match might be different.</value>
  </data>
  <data name="LicenceTypes.Text" xml:space="preserve">
    <value>Host,5,3,1</value>
    <comment>Comma separated list of licence types in descending order</comment>
  </data>
  <data name="Licensed.Text" xml:space="preserve">
    <value>The current domain is fully licensed.</value>
  </data>
  <data name="LicensingLink.Text" xml:space="preserve">
    <value>http://www.ifinity.com.au/Licensing</value>
  </data>
  <data name="PurchaseLicence.Text" xml:space="preserve">
    <value>Click here to purchase this licence</value>
  </data>
  <data name="ReturnToModule.Text" xml:space="preserve">
    <value>Return to Friendly Url Settings</value>
  </data>
  <data name="Unlicensed.Text" xml:space="preserve">
    <value>The current domain is not licensed.</value>
  </data>
  <data name="UploadLicence.Text" xml:space="preserve">
    <value>Upload New Licence File</value>
  </data>
  <data name="WrongProduct.Text" xml:space="preserve">
    <value>The licence loaded is for the wrong product.</value>
  </data>
  <data name="WrongProductVersion.Text" xml:space="preserve">
    <value>The licence loaded is for a prior version of the product.  The licence requires upgrading to the current product version.</value>
  </data>
</root>