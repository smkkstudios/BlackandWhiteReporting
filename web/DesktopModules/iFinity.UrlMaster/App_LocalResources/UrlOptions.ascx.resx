<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Always.Text" xml:space="preserve">
    <value>Always use page extension</value>
  </data>
  <data name="CacheSettings.Help" xml:space="preserve">
    <value>These settings are for advanced control over the page index cache settings.</value>
  </data>
  <data name="CacheSettings.Text" xml:space="preserve">
    <value>Advanced Page Index Cache Settings</value>
  </data>
  <data name="CompressionOffLicence.Text" xml:space="preserve">
    <value>Please note that because you are using a demo licence, the site Compression will be disabled automatically.</value>
  </data>
  <data name="CompressionOffOk.Text" xml:space="preserve">
    <value>The current settings allow for Http Compression to be used on this DNN Install. It is not currently being used - this is normal.</value>
  </data>
  <data name="CompressionOffSettings.Text" xml:space="preserve">
    <value>Please note your current Url Master settings prevent you from using Http Compression.  Http Compression is automatically disabled on your portal.</value>
  </data>
  <data name="CompressionOnOk.Text" xml:space="preserve">
    <value>You have Http Compression Enabled for your site</value>
  </data>
  <data name="DefaultRedirect.Message" xml:space="preserve">
    <value>If your site is IIS5, IIS6, or IIS7 in 'classic' mode, then you must have set up 'wildcard' extension mapping for this option to work.  If you are on IIS7 or later with integrated pipeline, then you will also need to have 'no page extensions' selected as an option.  If you select this option without the correct setup, you will cause a terminal 301 redirect loop on the site root url.  See &lt;a href="http://www.ifinity.com.au/Products/KB/Url_Master/topic/Switching+off+page+extensions+in+IIS"&gt;Switching off Page Extensions in IIS&lt;/a&gt; for more information.</value>
  </data>
  <data name="Do301RedirectToPortalHome.Text" xml:space="preserve">
    <value>301 redirect to site Home Page</value>
    <comment>Caption for deleted tab handling option</comment>
  </data>
  <data name="Do404Error.Text" xml:space="preserve">
    <value>Return 404 Not Found Error</value>
    <comment>Caption for deleted tab handling option of 404 error</comment>
  </data>
  <data name="FirstLast.Text" xml:space="preserve">
    <value>Use the key name of the first parameter as the last value in the Url</value>
    <comment>Caption for 'first last' parameter list option</comment>
  </data>
  <data name="hlinkLicenceUpload.Text" xml:space="preserve">
    <value>Upload Licence File / Check Licence Details</value>
  </data>
  <data name="AdvancedRegexSettings.Help" xml:space="preserve">
    <value>This section contains regex filters which affect the way that requests are processed, urls are generated and other functions.  They should only be modified if you have a good understanding of regex and know exactly what function the regex filter performs.</value>
  </data>
  <data name="AdvancedRegexSettings.Text" xml:space="preserve">
    <value>Advanced Regex Filters</value>
  </data>
  <data name="ApplyWarning.Help" xml:space="preserve">
    <value>When 'Apply Changes' is clicked, the settings shown on the page are written to the web.config, overwriting any existing friendly Url settings currently in place.  This changes the behaviour of the website and forces a restart of the entire application.  This function shoudl be used sparingly and only by knowledgeable administrators.</value>
  </data>
  <data name="ApplyWarning.Text" xml:space="preserve">
    <value>WARNING:  Each time you click 'Apply Changes', this website will restart.  Use the 'Test Url Changes' tab to test out changes before applying.</value>
  </data>
  <data name="AutoAsciiConversion.Help" xml:space="preserve">
    <value>When checked, this option automatically translates diacritic characters like ê to e in the Urls.  When automatic 301 redirects are enabled, it will also forward any requests for the 'ê' version to the 'e' Url.</value>
  </data>
  <data name="AutoAsciiConversion.Text" xml:space="preserve">
    <value>Convert Diacritics in Page names to Ascii equivalent?</value>
  </data>
  <data name="CacheTime.Help" xml:space="preserve">
    <value>Specifies the amount of time between scheduled page index rebuilds.  If the site is very static (very few Url changes) then a longer cache time will result in better performance.</value>
  </data>
  <data name="CacheTime.Text" xml:space="preserve">
    <value>Length of Time to cache Page Index for</value>
  </data>
  <data name="CheckForDupUrls.Help" xml:space="preserve">
    <value> Checks for Duplicate Urls across the DNN installation.  This will depend on the order the pages were added.  If a Duplicate Url exception is found in the log, one or both of the clashing Url's should be changed.  Note that if duplicate pages are found, the first page in the list will be shown for the Url.</value>
    <comment>Help text for duplicate Url check</comment>
  </data>
  <data name="CheckForDupUrls.Text" xml:space="preserve">
    <value>Produce an Exception in the Site Log if two pages have the same name/path?</value>
    <comment>Caption for duplicate Url check</comment>
  </data>
  <data name="ClientSslRedirect.Help" xml:space="preserve">
    <value>If the SSL handling for a portal includes 'enforce https settings', then a non-https page requested as https will be redirected to the http version.  If this value is checked,  a client-based javascript redirect will be used to avoid a browser security warning.  If unchecked, the server will do the redirection, which may produce a browser security warning.</value>
  </data>
  <data name="ClientSslRedirect.Text" xml:space="preserve">
    <value>When switching from https -&gt; http use client based redirect?</value>
  </data>
  <data name="CurrentProvider.False" xml:space="preserve">
    <value>Your current Friendly Url Provider is the &lt;i&gt;{0}&lt;/i&gt;. &lt;br/&gt;&lt;strong&gt; Your site is not enabled for the Url Master functionality until you click on the 'Apply Changes' button at the bottom of the screen, which will change the Friendly Url Provider to be the Url Master module.&lt;/strong&gt;</value>
  </data>
  <data name="CurrentProvider.True" xml:space="preserve">
    <value>Your current Friendly Url Provider is the Url Master module.</value>
  </data>
  <data name="DeletedTabHandling.Help" xml:space="preserve">
    <value>Choose one of these options for how to deal with deleted or expired pages.  A 301 redirect means the page will always redirect back to the home page if requested.  A 404 error means that the webserver will be told to issue a 404 request, and the default handling for that should be used.  Expired pages are pages where the page expiry date is earlier than the current date, or the page start date has not yet been reached.</value>
    <comment>Help text for the deleted tab handling option</comment>
  </data>
  <data name="DeletedTabHandling.Text" xml:space="preserve">
    <value>Action for Pages which have been deleted, disabled or have expired</value>
    <comment>Caption for Deleted Tab Handling</comment>
  </data>
  <data name="DoNotIncludeInPathRegex.Help" xml:space="preserve">
    <value>This regex pattern is used to stop certain key/value pairs being included in a friendly url path.  If the regex pattern matches the path section of a url (ie /key1/value1/key2/value2 - the part of a path after the DNN page name), then that part will be removed from the path and appended to the end of the url as a querystring key/value pair.  Note you must match the entire key/value/ pair or remnants will be left in the url.  The querystring items will be constructed by splitting up the / delimited items and reformatting as &amp;key=value.  If there is an uneven amount of path items, the result will be a partial querystring.</value>
  </data>
  <data name="DoNotIncludeInPathRegex.Text" xml:space="preserve">
    <value>Do not include matching items in friendly url path - force to be in the querystring (doNotIncludeInPathRegex)</value>
  </data>
  <data name="DoNotRedirectRegex.Help" xml:space="preserve">
    <value>By forming a Regex expression, any match on an incoming Url will mean the matched Url will not result in a 301 redirect, even if the matched Url is an 'unfriendly' Url.  This setting is often used to exclude Urls which for some reason, cause problems with the 301 redirections.</value>
    <comment>Help text for Redirect Regex</comment>
  </data>
  <data name="DoNotRedirectRegex.Text" xml:space="preserve">
    <value>Do not Redirect any Url's which match this regex expression (doNotRedirectRegex)</value>
    <comment>Caption for Redirect Regex</comment>
  </data>
  <data name="DoNotRedirectSecureRegex.Help" xml:space="preserve">
    <value>Any request matching this regex pattern will be excluded from the SSL redirect code.</value>
  </data>
  <data name="DoNotRedirectSecureRegex.Text" xml:space="preserve">
    <value>Do not redirect http &lt;-&gt; https when Url matches this pattern (doNotRedirectSecureRegex)</value>
  </data>
  <data name="DoNotRewriteRegex.Text" xml:space="preserve">
    <value>Any Url matching this Regex expression will not be rewritten and processed by DotNetNuke. (doNotRewriteRegex)</value>
  </data>
  <data name="ForceLowerCaseRegex.Help" xml:space="preserve">
    <value>If using the 'force lower case' option, or the 'redirect to lower case' option, any Url matching this value will not be changed or redirected to lower case.</value>
  </data>
  <data name="ForceLowerCaseRegex.Text" xml:space="preserve">
    <value>Do not change case of urls that match this regex (forceLowerCaseRegex)</value>
  </data>
  <data name="ForwardExternalUrls.Help" xml:space="preserve">
    <value>When either 'Redirect 301' or 'Redirect 302' is selected, any request to a DotNetNuke page url, where that page has an 'external url' defined in the advanced page settings will be redirected to the defined destination Url.</value>
  </data>
  <data name="ForwardExternalUrls.Text" xml:space="preserve">
    <value>Forward Pages with External Urls defined?</value>
  </data>
  <data name="IgnoreRegex.Help" xml:space="preserve">
    <value>By forming a Regex expression, any Url which matches this expression will bypass the Url rewriting and processing process completely.  This means the request for the Url will be passed to the underlying web server and will not be processed by DotNetNuke.</value>
  </data>
  <data name="IgnoreRegex.Text" xml:space="preserve">
    <value>Do not attempt to rewrite or redirect any Url which matches this Regex expression. (ignoreRegex)</value>
  </data>
  <data name="LogCacheMessages.Help" xml:space="preserve">
    <value>This is a diagnostic setting to track how many page index cache rebuilds occur while running the site.</value>
  </data>
  <data name="LogCacheMessages.Text" xml:space="preserve">
    <value>Show Page Index Cache rebuild messages in site log?</value>
  </data>
  <data name="NoFriendlyUrlRegex.Help" xml:space="preserve">
    <value>This regex expression is used to stop the friendly url generation of any path that matches the regex.  This can be used to stop friendly urls for a single page, set of pages, or any page with a certain querystring value.  Note this value does not affect the lower case generation (if that option applies).  This option is generally used to allow third party modules on a particular page to function properly, if for some reason they do not use the standard DNN format.</value>
  </data>
  <data name="NoFriendlyUrlRegex.Text" xml:space="preserve">
    <value>Do not generate a friendly url for any path matching this regex pattern (noFriendlyUrlRegex)</value>
  </data>
  <data name="Overview.Text" xml:space="preserve">
    <value>This page shows all the settings for the Url Master module that apply to all portals within this DotNetNuke installation.</value>
    <comment>Page Information</comment>
  </data>
  <data name="PersistRestart.Help" xml:space="preserve">
    <value>When checked, the Page index will be kept even though there is a restart of the application.  </value>
  </data>
  <data name="PersistRestart.Text" xml:space="preserve">
    <value>Persist Page Index cache through Application Restart?</value>
  </data>
  <data name="RebaseClientUrl.Help" xml:space="preserve">
    <value>Used in the call to the underlying asp.net context.RewritePath(url, rebaseClientPath) call.  Rebase client path determines whether to make all urls relative to the virtual path, or relative to the site root.  Default:false.  Do not change this value without an understanding of the effects.</value>
  </data>
  <data name="RebaseClientUrl.Text" xml:space="preserve">
    <value>Rebase Client Url when Rewriting Virtual Urls?</value>
  </data>
  <data name="RedirectDefaultPage.Help" xml:space="preserve">
    <value>When checked, this value will redirect any site.com/default.aspx request to site.com/.  This helps eliminate duplicate Urls for the home page.   Note, however, that some IIS installations will automatically always append the /default.aspx value to the end of the incoming Url request.  If this is the case for this server, then this option cannot be used, or it will result in a 301 redirect loop, where the any request to site.com/default.aspx will redirect to site.com/, which will be interpreted by IIS as site.com/default.aspx, and a terminal loop will ensure. Firefox and othre browsers will detect this loop and stop it, other browsers such as IE will just 'hang' trying to complete the request.</value>
    <comment>Redirect Default Page Help</comment>
  </data>
  <data name="RedirectUnfriendly.Help" xml:space="preserve">
    <value>When this option is checked, any request for a dnn page which is not the 'friendliest' version will be redirected to the 'friendliest' version.  This means that mysite.com/home/tabid/66/default.aspx or mysite/Default.aspx?tabId=66 will be redirected to mySite/Home.aspx (assuming a page called home, tabid 66).</value>
    <comment>Help text for redirect unfriendly switch</comment>
  </data>
  <data name="RedirectUnfriendly.Text" xml:space="preserve">
    <value>Do 301 redirect on Urls not in Friendly Url Format?</value>
    <comment>Caption for redirect unfriendly switch</comment>
  </data>
  <data name="RedirectWrongCase.Help" xml:space="preserve">
    <value>When checked, every Url requested will be checked against the output from the FriendlyUrlProvider.  If the case does not match, then the request will be redirected to the matching case of the FriendlyUrl.  This means that mysite/mypage.aspx would be redirect to MySite/MyPage.aspx.   This is most often used when the administrator wants to ensure that all indexed content of a website uses the same case.</value>
    <comment>Help text for Wrong case redirection</comment>
  </data>
  <data name="RedirectWrongCase.Text" xml:space="preserve">
    <value>Do 301 redirect when Url is not in Lower Case?</value>
    <comment>Caption for Wrong case redirection</comment>
  </data>
  <data name="ReplaceSpaces.Help" xml:space="preserve">
    <value>When checked, a value must be supplied in the entry field.  When checked, all Urls will be generated from the Page Name, and replacing any spaces or special characters (&amp;;:# and more) with the supplied value.
                &lt;p&gt;Example: My Test Page (Page Name), with replace space value of '_' becomes My_Test_Page (standard DNN value would be MyTestPage).&lt;/p&gt;
                &lt;p&gt;Common Usage: Administrators like to separate out individual words in Page Urls, so that search engines searching by keyword find the correct match, as many search engines regard characters like '-' and '_' as valid word separators.&lt;/p&gt;</value>
    <comment>Help Text for Replace Spaces</comment>
  </data>
  <data name="ReplaceSpaces.Text" xml:space="preserve">
    <value>Replace Spaces in Page Titles?</value>
    <comment>Caption for Replace Spaces</comment>
  </data>
  <data name="SpaceEncodingValue.Help" xml:space="preserve">
    <value>Choose the type of value to encode a space character with when it appears in the Url Path.  IIS7 by default disallows the '+' character.</value>
  </data>
  <data name="SpaceEncodingValue.Text" xml:space="preserve">
    <value>Url Path Space Character Encoding Value</value>
  </data>
  <data name="TriggerDictionaryRebuildRegex.Help" xml:space="preserve">
    <value>This regex expression is used to trigger a Page index rebuild.  If a Url is requested which matches the Regex expression, then the Page Index will be rebuilt.  By default it matches the new/edit page Urls in DotNetNuke, but it can be modified to match any request which should rebuild the page Index. Note that there is a performance overhead to rebuilding the page index, and matches should be kept to a minimum.</value>
    <comment>Help Text for Trigger Dictionary Rebuild</comment>
  </data>
  <data name="TriggerDictionaryRebuildRegex.Text" xml:space="preserve">
    <value>Rebuild Page Index and Update Cache when Url matches this Regex (triggerDictionaryRebuildRegex)</value>
    <comment>Caption for Trigger Dictionary Rebuild</comment>
  </data>
  <data name="lblUrlRewritingSettings.Help" xml:space="preserve">
    <value>These settings change the options for interpreting the Urls and ensuring the request is for the correct tab, and redirecting Url's to the correct page where necessary.</value>
  </data>
  <data name="lblUrlRewritingSettings.Text" xml:space="preserve">
    <value>Url Rewriting and Redirection Settings</value>
  </data>
  <data name="licenceOptionsHdr.Text" xml:space="preserve">
    <value>Licence Ordering / Upgrading Details</value>
  </data>
  <data name="Never.Text" xml:space="preserve">
    <value>Never use page extension</value>
  </data>
  <data name="NoExtension.Message" xml:space="preserve">
    <value>If your site is IIS5, IIS6 or IIS7 in 'classic' mode, you must have set up 'wildcard' extensions before using this option, or your site will not work.  See &lt;a href="http://www.ifinity.com.au/Products/KB/Url_Master/topic/Switching+off+page+extensions+in+IIS"&gt;Switching off Page Extensions in IIS&lt;/a&gt; for more information.</value>
  </data>
  <data name="Off.Text" xml:space="preserve">
    <value>Off</value>
  </data>
  <data name="On.Text" xml:space="preserve">
    <value>On</value>
  </data>
  <data name="optForwardExternalUrls.NoForward" xml:space="preserve">
    <value>Show DotNetNuke Page (default)</value>
  </data>
  <data name="optForwardExternalUrls.Redirect301" xml:space="preserve">
    <value>Do 301 Redirect to external Url</value>
  </data>
  <data name="optForwardExternalUrls.Redirect302" xml:space="preserve">
    <value>Do 302 Redirect to external Url</value>
  </data>
  <data name="Ordered.Text" xml:space="preserve">
    <value>Keep parameters in the same order</value>
    <comment>Caption for 'oRdered' parameter list option</comment>
  </data>
  <data name="PageOnly.Text" xml:space="preserve">
    <value>Only for Pages</value>
  </data>
  <data name="RevertMessage.Text" xml:space="preserve">
    <value>Changes Reverted Ok</value>
  </data>
  <data name="SaveMessage.Text" xml:space="preserve">
    <value>Changes Applied OK</value>
  </data>
  <data name="TimeUnits.Hours" xml:space="preserve">
    <value>Hours</value>
  </data>
  <data name="TimeUnits.Minutes" xml:space="preserve">
    <value>Minutes</value>
  </data>
  <data name="Uninstall.Text" xml:space="preserve">
    <value>Uninstall Module</value>
  </data>
  <data name="AllowDebugCode.Help" xml:space="preserve">
    <value>This setting, when checked, allow the supply of the request parameter _umdebug:true to output debug information about the current request.  If unchecked, the request parameter will not supply the debug data.  It is normally only unchecked when a module compatibilty problem requires it.</value>
  </data>
  <data name="AllowDebugCode.Text" xml:space="preserve">
    <value>Allow Debug Code?</value>
  </data>
  <data name="AdvancedSettingsTabHdr.Text" xml:space="preserve">
    <value>Advanced Settings</value>
  </data>
  <data name="CurrentProvider.Help" xml:space="preserve">
    <value>The currently configured provider shows which component your DotNetNuke installation is using to generate Friendly Urls with, and using to rewrite those Friendly Urls back to the format that DotNetNuke uses.</value>
  </data>
  <data name="CurrentProvider.Text" xml:space="preserve">
    <value>Currently Configured Url Rewriting / Friendly Url Generation Provider</value>
  </data>
  <data name="ExamplePageName.Text" xml:space="preserve">
    <value>[optional] Custom Page Name / Url End String  (if omitted /default.aspx used)</value>
  </data>
  <data name="ExampleQueryString.Text" xml:space="preserve">
    <value>[optional] Add on this query string (in format of &amp;key=value&amp;key2=value2)</value>
  </data>
  <data name="ForceLowerCase.Help" xml:space="preserve">
    <value>When this setting is checked, all the Urls in the site will be generated in lower case.</value>
  </data>
  <data name="ForceLowerCase.Text" xml:space="preserve">
    <value>Change all Urls in the site to be lower case</value>
  </data>
  <data name="ForceLowerCase.Text	Change all Urls in the site to be lower case" xml:space="preserve">
    <value />
  </data>
  <data name="FriendlyUrlSettingsTabHdr.Text" xml:space="preserve">
    <value>Friendly Url Settings</value>
  </data>
  <data name="LanguageCultureResults.Help" xml:space="preserve">
    <value>This returns the identified language/culture setting for the request.  This value determines the localization of the requested page.</value>
  </data>
  <data name="LanguageCultureResults.Text" xml:space="preserve">
    <value>Identified Language / Culture</value>
  </data>
  <data name="NoForward.Text" xml:space="preserve">
    <value>Standard DotNetNuke behaviour - show blank page</value>
  </data>
  <data name="NoForward.Text	Standard DotNetNuke behaviour - show blank page" xml:space="preserve">
    <value />
  </data>
  <data name="PageExtension.Help" xml:space="preserve">
    <value>This value specifies the extension to use on the end of the Urls.  The default value is .aspx.  You can specify any value as long as ASP.NET is configured to handle the extension.</value>
  </data>
  <data name="PageExtension.Text" xml:space="preserve">
    <value>Extension to use on Urls (default is .aspx)</value>
  </data>
  <data name="PageExtensionUsage.Always" xml:space="preserve">
    <value>All Urls will have the specified extension</value>
  </data>
  <data name="PageExtensionUsage.Help" xml:space="preserve">
    <value>This option controls what page extensions to use for output Urls.  The options are: &lt;ul&gt;&lt;li&gt;Always: always use the default or specified page extension&lt;/li&gt;&lt;li&gt;Never : never show a page extension (.aspx or specified) in a Url&lt;/li&gt;&lt;li&gt;Page Only: Only show the specified Page Extension if the Url  does not have any Query string parameters.When parameters are present, remove the page extension.  Thus mySite/Home.aspx will become mySite/Home/Key/Value/ if a Query String is present.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Changing the Page Extension requires changes to the IIS settings.  If you do not have access to the IIS settings to set up custom page extension handling at the ISAPI level, changing this value will cause your site to stop functioning.  Always test this setting on a non-critical test server before committing to running a site using 'None' or 'Page Only'&lt;/p&gt;</value>
  </data>
  <data name="PageExtensionUsage.Never" xml:space="preserve">
    <value>None of the Urls will have a page extension</value>
  </data>
  <data name="PageExtensionUsage.PageOnly" xml:space="preserve">
    <value>Only DotNetNuke pages with no querystring will have an extension</value>
  </data>
  <data name="PageExtensionUsage.Text" xml:space="preserve">
    <value>Page Extension Handling</value>
  </data>
  <data name="PageExtensionWarning.Text" xml:space="preserve">
    <value>If you are using IIS6, or IIS7 in 'classic' mode, and you choose 'No page extensions' or 'Only DotNetNuke Pages', you cannot use this function until you have completed the process of setting up 'wildcard mapping' for your page extensions.  If you are not sure, please check with the person responsible for hosting your site.&lt;br&gt;&lt;br&gt;If you do not have the wildcard mapping set up in IIS, and you apply this change, your site will no longer work.  &lt;br&gt;&lt;br&gt;&lt;strong&gt;If you do not understand this message, seek advice before continuing&lt;/strong&gt;.  See &lt;a href="http://www.ifinity.com.au/Products/KB/Url_Master/topic/Switching+off+page+extensions+in+IIS"&gt;Switching off Page Extensions in IIS&lt;/a&gt; for more information.</value>
  </data>
  <data name="PageExtensionWarning.Title" xml:space="preserve">
    <value>Important information about Page Extensions</value>
  </data>
  <data name="PerformanceSettingsTabHdr.Text" xml:space="preserve">
    <value>Performance Settings</value>
  </data>
  <data name="Redirect301.Text" xml:space="preserve">
    <value>Do a 301 Redirect to the specified Url</value>
  </data>
  <data name="Redirect302.Text" xml:space="preserve">
    <value>Do a 302 Redirect to the specified Url</value>
  </data>
  <data name="RedirectDefaultPage.Text" xml:space="preserve">
    <value>301 Redirect /default.aspx to the site root?</value>
  </data>
  <data name="RedirectResults.Help" xml:space="preserve">
    <value>If a redirect was identified, shows what the redirect is.</value>
  </data>
  <data name="RedirectResults.Text" xml:space="preserve">
    <value>Redirection Result</value>
  </data>
  <data name="RegexSettingsHdr.Help" xml:space="preserve">
    <value>These filters are all Regex statements, and are used by the module to control behaviour of different Urls requested.  Do not modify these values unless you are aware of the results and fully understand the complexities of Regex.  You may be instructed to update the regex settings as part of a compatibility change or module update.</value>
  </data>
  <data name="RegexSettingsHdr.Text" xml:space="preserve">
    <value>Regex filters</value>
  </data>
  <data name="RegexSettingsTabHdr.Text" xml:space="preserve">
    <value>Regex Settings</value>
  </data>
  <data name="RewriteMessage.Help" xml:space="preserve">
    <value>Shows any informational messages generated during the test.</value>
  </data>
  <data name="RewriteMessage.Text" xml:space="preserve">
    <value>Operation Messages</value>
  </data>
  <data name="RewriteResults.Help" xml:space="preserve">
    <value>Shows the resulting rewritten Url that would be used by the rest of DNN</value>
  </data>
  <data name="RewriteResults.Text" xml:space="preserve">
    <value>Rewriting result</value>
  </data>
  <data name="SelectTestPage.Help" xml:space="preserve">
    <value>This section tests the generation of Friendly Urls in your site.  To use, just select the page from your site you'd like to see the Url for, and click the 'Show Generated Url with current settings' button.  If you are using a module that uses querystring values, enter those values into the querystring box, and they will be incorporated into the result, showing how the Url will look for a particular module.</value>
  </data>
  <data name="SelectTestPage.Text" xml:space="preserve">
    <value>Select Test Page and click button to view how Url will look</value>
  </data>
  <data name="TabNameResults.Help" xml:space="preserve">
    <value>Shows the Tab in the portal that was identified by the request.</value>
  </data>
  <data name="TabNameResults.Text" xml:space="preserve">
    <value>Identified Tab</value>
  </data>
  <data name="TestRewrite.Help" xml:space="preserve">
    <value>Enter the url exactly as you would see the Url in the browser.</value>
  </data>
  <data name="TestRewrite.Text" xml:space="preserve">
    <value>Enter Url to test (include http:// and full Url)</value>
  </data>
  <data name="TestRewriteButton.Text" xml:space="preserve">
    <value>Show Rewriting result with current settings</value>
  </data>
  <data name="TestRewriteHeader.Help" xml:space="preserve">
    <value>You can test out the changes resulting from selected options on this page before applying changes, by using this test section.  You can use the test rewriting box at any time, with any settings, and it will give the rewriting results.  Note that it's possible to get a divergence between the test where IIS settings may cause a different result, for example, if an extension-less Url is tested here, and the IIS settings don't match, the test will work here but may not work in the browser.</value>
  </data>
  <data name="TestRewriteHeader.Text" xml:space="preserve">
    <value>Test Url Rewriting</value>
  </data>
  <data name="TestUrlsTabHdr.Text" xml:space="preserve">
    <value>Test Url Changes</value>
  </data>
  <data name="UrlSpace%20.Text" xml:space="preserve">
    <value>Hex Encoding (%20)</value>
  </data>
  <data name="UrlSpace+.Text" xml:space="preserve">
    <value>Url Encoding (+)</value>
  </data>
  <data name="UseSiteUrlsRegex.Help" xml:space="preserve">
    <value>Use this regex expression when there is a Url requested, and it needs to just match against one of the list of expressions in the Siteurls.config file.  By matching that Url with this regex expression, you can skip the rewriting processing used by the Friendly Urls, and go straight to the rules in the siteurls.config file.  Note : any url that matches this expression can &lt;em&gt;not&lt;/em&gt;match the 'doNotRewriteRegex' expression.  If it matches the 'doNotRewriteRegex' expression, then the useSiteUrlsRegex will never be evaluated.</value>
  </data>
  <data name="UseSiteUrlsRegex.Text" xml:space="preserve">
    <value>Any Url matching this Regex expression will bypass Friendly Url processing and compare against expressions in the siteurls.config file. (useSiteUrlsRegex)</value>
  </data>
  <data name="DoNotRewriteRegex.Help" xml:space="preserve">
    <value>Any Url matching this regex express will not be rewritten.  This means that no attempt will be made to match the Url against a DotNetNuke page for the portal, and the Url will not be transformed to the /default.aspx?tabid=xx format.  Use this expression to allow Url Master processing of the request, but when the Url maps to either a physical or virtual Url which is not a DotNetNuke page name.</value>
  </data>
  <data name="UseCacheDependency.Help" xml:space="preserve">
    <value>When true, the Page index of Urls will be rebuilt when a change to the DotNetNuke core tabs cache is made.  When false, the 'triggerDictionaryRebuildRegex' value is used to monitor POST Urls to rebuild the page index.  Default value is true.</value>
  </data>
  <data name="UseCacheDependency.Text" xml:space="preserve">
    <value>Use cache dependency on DotNetNuke tab cache to store Page Url index</value>
  </data>
  <data name="ForcePortalDefaultLanguage.Help" xml:space="preserve">
    <value>When true, this setting ensures that a rewritten Url always sets the current 'language' value.   If the language code is not found in the Url, or set via the page or current portal alias, then the default language of the identified portal will be specified.  Thus, every rewritten Url will have a &amp;language=xx-XX value in it.</value>
  </data>
  <data name="ForcePortalDefaultLanguage.Text" xml:space="preserve">
    <value>Portal Default Language always set when not otherwise specified?</value>
  </data>
  <data name="FriendlyAdminHostUrls.Help" xml:space="preserve">
    <value>When true, this setting will use Friendly Urls for the Admin and Host pages, except where otherwise specified via a regex setting or tab option.</value>
  </data>
  <data name="FriendlyAdminHostUrls.Text" xml:space="preserve">
    <value>Use Friendly Urls for Admin/Host pages?</value>
  </data>
  <data name="First.Text" xml:space="preserve">
    <value>first</value>
  </data>
  <data name="Last.Text" xml:space="preserve">
    <value>last</value>
  </data>
  <data name="Next.Text" xml:space="preserve">
    <value>next {0}</value>
  </data>
  <data name="PageListSize.Help" xml:space="preserve">
    <value>This setting allows you to modify the number of DotNetNuke pages that appear in the page lists throughout this module.  The number relates to the maximum number shown on each 'page' within the list. NOTE: refresh page after changing (and saving) setting to affect page lists.</value>
  </data>
  <data name="PageListSize.Text" xml:space="preserve">
    <value>Number of Pages to show for each 'page' in lists for this module</value>
  </data>
  <data name="Prev.Text" xml:space="preserve">
    <value>prev {0}</value>
  </data>
  <data name="MobileBrowsersRegex.Help" xml:space="preserve">
    <value>This regex expression is used to match against the User-Agent field of a Http request, in order to help identify a mobile browser.  This is only used when the standard ASP.NET 'IsMobileBrowser' test returns false, which occurs if the correct 'browser caps' files are not currently in place.  This regex field can be modified to match against a particular user-agent field of a specific mobile browser if they are not currently being correctly detected.  It is used for switching the domain name (portal alias) for a mobile-specific platform.</value>
  </data>
  <data name="MobileBrowsersRegex.Text" xml:space="preserve">
    <value>This regex expression matches against the 'User Agent' value to match mobile browsers.  [mobileBrowsersRegex]</value>
  </data>
  <data name="ReplaceCharWithChar.Help" xml:space="preserve">
    <value>This value allows you to specify a find/replace set of characters for the creation of friendly Tab paths from the Tab Names.  It works by creating a list of pairs, separated by , between the find and replace characters, and ; separating the pairs.  Example : ß,ss;æ,ae;Ø,O; - each of these replace a character with an ASCII equivalent.  Note: you can replace a single character with more than one character, but you cannot 'find' a character pair and replace.</value>
  </data>
  <data name="ReplaceCharWithChar.Text" xml:space="preserve">
    <value>Replace characters with supplied characters.&lt;/br&gt; Use f,r; pairs, where 'f' is the char to find, and 'r' is the char to replace with.</value>
  </data>
  <data name="PortalAdminsFullPermissions.Help" xml:space="preserve">
    <value>If unchecked, portal admins can only save changes to individual pages (creating custom urls) and none of the other settings.</value>
  </data>
  <data name="PortalAdminsFullPermissions.Text" xml:space="preserve">
    <value>Portal Administrators have full permissions on the Portal Urls page?</value>
  </data>
  <data name="IgnoreCustomProviders.Help" xml:space="preserve">
    <value>This switch overrides all custom Url provider settings.  If checked, no custom url providers will be used.</value>
  </data>
  <data name="IgnoreCustomProviders.Text" xml:space="preserve">
    <value>Disable all custom module providers?</value>
  </data>
  <data name="ValidExtensionlessUrlsRegex.Help" xml:space="preserve">
    <value>This regex pattern is used to identify any resources on the server that do not have a file extension, but are still valid resources.  This overrides the default behaviour of the module, which is to return a 404 on extensionless Urls where the Url can't be matched with a physical resource.</value>
  </data>
  <data name="ValidExtensionlessUrlsRegex.Text" xml:space="preserve">
    <value>Urls that match a resource on the server but do not end in a file extension (validExtensionlessUrlsRegex)</value>
  </data>
</root>
