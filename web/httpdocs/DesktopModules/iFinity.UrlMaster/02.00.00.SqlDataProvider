/************************************************************/
/*****              SQLDataProvider		                *****/
/*****              iFinity.Url Master 02.00.00			*****/
/*****                                                  *****/
/***** Note: To manually execute this script you must   *****/
/*****       perform a search and replace operation     *****/
/*****       for {databaseOwner} and {objectQualifier}	*****/
/************************************************************/
/* 736 : remove addTabAndTabModule for 5.5 compatibiltiy changes */
/* 904 : make compatible with dnn 6.2 */
/* rename page urls page portal urls */
if exists (select * from sysobjects o inner join syscolumns c on o.id = c.Id and o.id = object_id('{objectQualifier}Tabs') and c.name = 'TabPath')
BEGIN
declare @sql nvarchar(500)
set @Sql = '
update {databaseOwner}{objectQualifier}Tabs
set Title = ''Portal Urls''
  , TabName = ''Portal Urls''
  , TabPath = ''//Admin//PortalUrls''
where tabPath = ''//Admin//PageUrls'''
execute (@sql)
END

update {databaseOwner}ifty_TabModuleCreation
set Title = 'Portal Urls'
  , TabName = 'Portal Urls'
  , TabPath = '//Admin//PortalUrls'
where tabPath = '//Admin//PageUrls'

/* add new culture code value to redirects table */
if not exists (select * from sysobjects o inner join syscolumns c on o.id = c.Id and o.id = object_id('ifty_TabRedirect') and c.name = 'CultureCode')
begin
	alter table {databaseOwner}ifty_TabRedirect
	add CultureCode nvarchar(50) NULL
end 
GO

/****** Object:  StoredProcedure {databaseOwner}[ifty_GetTabRedirectsForTab]    Script Date: 09/15/2009 13:17:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF EXISTS (SELECT * FROM sysobjects where id = OBJECT_ID(N'{databaseOwner}[ifty_GetTabRedirectsForTab]') AND type in (N'P', N'PC'))
BEGIN
EXEC sp_executesql @statement = N'ALTER Procedure {databaseOwner}[ifty_GetTabRedirectsForTab]
(
	 @TabId		int 
)
AS
BEGIN

/* =============================================
	Author:      WOMBAT\Bruce
	Create date: 13/02/2008
	Description: Gets a ifty_TabRedirect record
   ============================================= 
	
	    Return Values
	    0  - Successful Execution.
	    1  - SQL Error. Rollback Occurred.
	    2  - No records modified. Rollback Occurred.
	    3  - No records modified. Commit Occured
	    4  - Error in sub procedure - entire top procedure rolled back.
	    5  - No record(s) returned. Procedure Executed Ok.
	    6+ - Specific to procedure
	
	    Modified by:		Date:		Reason for Modification:
		brc					15/09/09	Add new cultureCode column
	   =============================================*/

SET NOCOUNT ON 
DECLARE @ErrStr 	varchar(100)	/* Return error string				*/
DECLARE @Error		int		/* Return error value				*/
DECLARE @Rowcount	int		/* Return related row count			*/

	SELECT 
	    TabId	
	   ,SeqNum	
	   ,Url	
	   ,HttpStatus	
	   ,RedirectTabId	
	   ,CultureCode
	FROM {databaseOwner}ifty_TabRedirect
	WHERE TabId = @TabId
	
	SELECT @Error = @@ERROR, @RowCount = @@RowCount
	IF @Error <> 0
	BEGIN
		SELECT @ErrStr=''Error in ''+ OBJECT_NAME(@@PROCID) + ''. Stmt No.=1, Db=''+db_name()+'',Err=''+CONVERT(varchar(10),@Error)
		RAISERROR(@ErrStr,16,1)
		RETURN 1 /* statement failed */
	END
	/* finished procedure, return value and exit */
	RETURN 0	  /*** Procedure executed ok. */
END

' 
END
GO
/****** Object:  StoredProcedure {databaseOwner}[ifty_AddTabRedirect]    Script Date: 09/15/2009 13:17:37 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF EXISTS (SELECT * FROM sysobjects where id = OBJECT_ID(N'{databaseOwner}[ifty_AddTabRedirect]') AND type in (N'P', N'PC'))
BEGIN
EXEC sp_executesql @statement = N'
ALTER Procedure {databaseOwner}[ifty_AddTabRedirect]
(
	 @TabId		int 
	,@SeqNum		int OUTPUT
	,@Url		nvarchar(400)
	,@HttpStatus		nvarchar(100)
	,@RedirectTabId		int 
	,@CultureCode	nvarchar(50)
)
AS
BEGIN

/* =============================================
	Author:      WOMBAT\Bruce
	Create date: 12/02/2008
	Description: Adds a ifty_TabRedirect record
   ============================================= 
	
	    Return Values
	    0  - Successful Execution.
	    1  - SQL Error. Rollback Occurred.
	    2  - No records modified. Rollback Occurred.
	    3  - No records modified. Commit Occured
	    4  - Error in sub procedure - entire top procedure rolled back.
	    5  - No record(s) returned. Procedure Executed Ok.
	    6+ - Specific to procedure
	
	    Modified by:		Date:		Reason for Modification:
		brc					15/09/09	Add in new cultureCode column
	   =============================================*/

SET NOCOUNT ON 
DECLARE @ErrStr 	varchar(100)	/* Return error string				*/
DECLARE @Error		int		/* Return error value				*/
DECLARE @Rowcount	int		/* Return related row count			*/
DECLARE @TranCount  int     /* Keeps a record of the transaction count */
DECLARE @CurUser    varChar(15)
       ,@CurTime	dateTime
SELECT @CurUser = Current_User
      ,@CurTime = GetDate()

SELECT @TranCount = @@TRANCOUNT
IF @TranCount = 0 BEGIN TRANSACTION T1

	--auto sequence if not present
	if (@SeqNum < 1)
	BEGIN
		SELECT @SeqNum = COALESCE(Max(SeqNum),0) + 1
		FROM {databaseOwner}ifty_TabRedirect
		WHERE TabId = @TabId
	END

	INSERT INTO {databaseOwner}ifty_TabRedirect(
		  TabId
		 ,SeqNum
		 ,Url
		 ,HttpStatus
		 ,RedirectTabId
		 ,CultureCode
	) VALUES (
		  @TabId
		 ,@SeqNum
		 ,@Url
		 ,@HttpStatus
		 ,@RedirectTabId
		 ,@CultureCode
	)

	
	SELECT @Error = @@ERROR, @RowCount = @@RowCount
	IF @Error <> 0
	BEGIN
		IF @TranCount = 0 ROLLBACK TRANSACTION T1
		SELECT @ErrStr=''Error in ''+ OBJECT_NAME(@@PROCID) + ''. Stmt No.=1, Db=''+db_name()+'',Err=''+CONVERT(varchar(10),@Error)
		RAISERROR(@ErrStr,16,1)
		RETURN 1 /* statement failed */
	END
	/* finished procedure, commit and return */
	IF @TranCount = 0 COMMIT TRANSACTION T1
	IF @RowCount = 0
		RETURN 3	  /*** Procedure did nothing. Records committed */
	ELSE
		RETURN 0	  /*** Procedure executed ok. Records committed */
END


' 
END
GO
/****** Object:  StoredProcedure {databaseOwner}[ifty_UpdateTabRedirect]    Script Date: 09/15/2009 13:17:35 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF EXISTS (SELECT * FROM sysobjects where id = OBJECT_ID(N'{databaseOwner}[ifty_UpdateTabRedirect]') AND type in (N'P', N'PC'))
BEGIN
EXEC sp_executesql @statement = N'ALTER Procedure {databaseOwner}[ifty_UpdateTabRedirect]
(
	 @TabId		int 
	,@SeqNum		int 
	,@Url		nvarchar(400)
	,@HttpStatus		nvarchar(100)
	,@RedirectTabId		int 
	,@CultureCode	nvarchar(50)
)
AS
BEGIN

/* =============================================
	Author:      WOMBAT\Bruce
	Create date: 12/02/2008
	Description: Updates a ifty_TabRedirect record
   ============================================= 
	
	    Return Values
	    0  - Successful Execution.
	    1  - SQL Error. Rollback Occurred.
	    2  - No records modified. Rollback Occurred.
	    3  - No records modified. Commit Occured
	    4  - Error in sub procedure - entire top procedure rolled back.
	    5  - No record(s) returned. Procedure Executed Ok.
	    6+ - Specific to procedure
	
	    Modified by:		Date:		Reason for Modification:
		brc					15/09/09	Add in new CultureCode column
	   =============================================*/

SET NOCOUNT ON 
DECLARE @ErrStr 	varchar(100)	/* Return error string				*/
DECLARE @Error		int		/* Return error value				*/
DECLARE @Rowcount	int		/* Return related row count			*/
DECLARE @TranCount  int     /* Keeps a record of the transaction count */
DECLARE @CurUser    varChar(15)
       ,@CurTime	dateTime
SELECT @CurUser = Current_User
      ,@CurTime = GetDate()

SELECT @TranCount = @@TRANCOUNT
IF @TranCount = 0 BEGIN TRANSACTION T1

	UPDATE {databaseOwner}ifty_TabRedirect
	Set TabId	 = 	@TabId
	  ,SeqNum	 = 	@SeqNum
	  ,Url	 = 	@Url
	  ,HttpStatus	 = 	@HttpStatus
	  ,RedirectTabId	 = 	@RedirectTabId
	  ,CultureCode		= @CultureCode
	WHERE TabId = @TabId
	   AND SeqNum = @SeqNum

	
	SELECT @Error = @@ERROR, @RowCount = @@RowCount
	IF @Error <> 0
	BEGIN
		IF @TranCount = 0 ROLLBACK TRANSACTION T1
		SELECT @ErrStr=''Error in ''+ OBJECT_NAME(@@PROCID) + ''. Stmt No.=1, Db=''+db_name()+'',Err=''+CONVERT(varchar(10),@Error)
		RAISERROR(@ErrStr,16,1)
		RETURN 1 /* statement failed */
	END
	/* finished procedure, commit and return */
	IF @TranCount = 0 COMMIT TRANSACTION T1
	IF @RowCount = 0
		RETURN 3	  /*** Procedure did nothing. Records committed */
	ELSE
		RETURN 0	  /*** Procedure executed ok. Records committed */
END

' 
END
GO
/****** Object:  StoredProcedure {databaseOwner}[ifty_GetTabsAndRedirects]    Script Date: 09/15/2009 13:17:36 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF EXISTS (SELECT * FROM sysobjects where id = OBJECT_ID(N'{databaseOwner}[ifty_GetTabsAndRedirects]') AND type in (N'P', N'PC'))
BEGIN
EXEC sp_executesql @statement = N'
ALTER Procedure {databaseOwner}[ifty_GetTabsAndRedirects]
(
	 @portalId		int 
	,@includeAdminPages  bit
	,@includeHostPages   bit
)
AS
BEGIN

/* =============================================
	Author:      WOMBAT\Bruce
	Create date: 13/02/2008
	Description: Gets all tabs and ifty_TabRedirect records
   ============================================= 
	
	    Return Values
	    0  - Successful Execution.
	    1  - SQL Error. Rollback Occurred.
	    2  - No records modified. Rollback Occurred.
	    3  - No records modified. Commit Occured
	    4  - Error in sub procedure - entire top procedure rolled back.
	    5  - No record(s) returned. Procedure Executed Ok.
	    6+ - Specific to procedure
	
	    Modified by:		Date:		Reason for Modification:
		brc					23/07/09	Change to use {objectQualifier}Vw_tabs to match expected object columns (643)
		brc					15/09/09	Add in new cultureCode column
	   =============================================*/

SET NOCOUNT ON 
DECLARE @ErrStr 	varchar(100)	/* Return error string				*/
DECLARE @Error		int		/* Return error value				*/
DECLARE @Rowcount	int		/* Return related row count			*/

	Select *
	From {objectQualifier}vw_Tabs
	Where ((@portalId = PortalId OR (PortalId is NULL and @includeHostPages = 1))
	    OR (@portalId = -1 AND ((PortalID is NOT NULL and @includeHOstPages = 0) 
	    OR  @includeHostPages = 1)))
		/* admin tabs */
	  AND ((taBorder between 10000 and 10050 and @includeAdminPages = 1)
	   OR (taBorder NOT between 10000 and 10050))
	ORDER BY PortalId, TabOrder

	SELECT @Error = @@ERROR, @RowCount = @@RowCount
	IF @Error <> 0
	BEGIN
		SELECT @ErrStr=''Error in ''+ OBJECT_NAME(@@PROCID) + ''. Stmt No.=1, Db=''+db_name()+'',Err=''+CONVERT(varchar(10),@Error)
		RAISERROR(@ErrStr,16,1)
		RETURN 1 /* statement failed */
	END

	SELECT 
	    tr.TabId	
	   ,tr.SeqNum	
	   ,tr.Url	
	   ,tr.HttpStatus	
	   ,tr.RedirectTabId	
	   ,tr.CultureCode
	FROM {databaseOwner}ifty_TabRedirect tr
	INNER JOIN {objectQualifier}Tabs t
		on t.TabId = tr.TabId
	WHERE (@portalId = PortalId OR @portalId = -1)
	  AND ((taBorder between 10000 and 10050 and @includeAdminPages = 1)
	   OR (taBorder NOT between 10000 and 10050))
	ORDER BY PortalId, TabOrder, SeqNum

	SELECT @Error = @@ERROR, @RowCount = @@RowCount
	IF @Error <> 0
	BEGIN
		SELECT @ErrStr=''Error in ''+ OBJECT_NAME(@@PROCID) + ''. Stmt No.=2, Db=''+db_name()+'',Err=''+CONVERT(varchar(10),@Error)
		RAISERROR(@ErrStr,16,1)
		RETURN 1 /* statement failed */
	END
	/* finished procedure, return value and exit */
	RETURN 0	  /*** Procedure executed ok. */
END


' 
END
GO

/* new 404 log info table and stored procedures */

/****** Object:  Table {databaseOwner}[ifty_Site404Log]    Script Date: 04/19/2010 20:09:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID(N'{databaseOwner}[ifty_Site404Log]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE {databaseOwner}[ifty_Site404Log](
	[Site404Id] [uniqueidentifier] NOT NULL,
	[RequestDateTime] [datetime] NOT NULL,
	[SequenceNum] [int] NOT NULL,
	[PortalId] [int] NULL,
	[PortalAliasId] [int] NULL,
	[Referer] [nvarchar](255) NULL,
	[Url] [nvarchar](255) NULL,
	[OriginalUrl] [nvarchar](255) NULL,
	[UserAgent] [nvarchar](512) NULL,
	[HostAddress] [nvarchar](255) NULL,
	[HostName] [nvarchar](255) NULL,
	[TabId] [int] NULL,
 CONSTRAINT [PK_ifty_Site404Log] PRIMARY KEY CLUSTERED 
(
	[Site404Id] ASC
) 
) 
END
GO


/****** Object:  StoredProcedure {databaseOwner}[ifty_AddSite404Log]    Script Date: 04/19/2010 20:08:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID(N'{databaseOwner}[ifty_AddSite404Log]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC sp_executesql @statement = N'CREATE Procedure {databaseOwner}[ifty_AddSite404Log]
(
	 @Site404Id		uniqueidentifier 
	,@RequestDateTime		datetime 
	,@SequenceNum		int  OUTPUT
	,@PortalId		int 
	,@PortalAliasId		int 
	,@Referer		nvarchar(510)
	,@Url		nvarchar(510)
	,@OriginalUrl		nvarchar(510)
	,@UserAgent		nvarchar(512)
	,@HostAddress		nvarchar(510)
	,@HostName		nvarchar(510)
	,@TabId		int 
	,@max404LogSize int = 0
)
AS
BEGIN

/* =============================================
	Author:      natives\bruce
	Create date: 19/04/2010
	Description: Adds a Site404LogInfo record
   ============================================= 
	
	    Return Values
	    -2  - No records modified. Commit Occured
	    -1  - No record(s) returned. Procedure Executed Ok.
	    0  - Successful Execution.
	    1  - SQL Error. Rollback Occurred.
	    2  - No records modified. Rollback Occurred.
	    3  - Error in sub procedure - entire top procedure rolled back.
	    4+ - Specific to procedure
	
	    Modified by:		Date:		Reason for Modification:
	
	   =============================================*/

SET NOCOUNT ON 
DECLARE @ErrStr 	varchar(100)	/* Return error string				*/
DECLARE @Error		int		/* Return error value				*/
DECLARE @Rowcount	int		/* Return related row count			*/
DECLARE @TranCount  int     /* Keeps a record of the transaction count */
DECLARE @CurUser    varChar(15)
       ,@CurTime	dateTime
SELECT @CurUser = Current_User
      ,@CurTime = GetDate()
DECLARE @RetVal int	/* return value from sub procedure */

SELECT @TranCount = @@TRANCOUNT
IF @TranCount = 0 BEGIN TRANSACTION T1

	if @portalId = -1 
		set @portalId = null

	SELECT @SequenceNum = Coalesce(Max(SequenceNum),0) + 1
	FROM {databaseOwner}ifty_Site404Log
	WHERE PortalId = @PortalId
	
	INSERT INTO {databaseOwner}ifty_Site404Log(
		  Site404Id
		 ,RequestDateTime
		,SequenceNum
		 ,PortalId
		 ,PortalAliasId
		 ,Referer
		 ,Url
		 ,OriginalUrl
		 ,UserAgent
		 ,HostAddress
		 ,HostName
		 ,TabId
	) VALUES (
		  @Site404Id
		 ,@RequestDateTime
		,@SequenceNum
		 ,@PortalId
		 ,case when @PortalAliasId = -1 then null else @portalALiasId END
		 ,@Referer
		 ,@Url
		 ,@OriginalUrl
		 ,@UserAgent
		 ,@HostAddress
		 ,@HostName
		 ,case when @TabId = -1 then null else @tabId END
	)

	SELECT @SequenceNum= @@Identity
	
	SELECT @Error = @@ERROR, @RowCount = @@RowCount
	IF @Error <> 0
	BEGIN
		IF @TranCount = 0 ROLLBACK TRANSACTION T1
		SELECT @ErrStr=''Error in ''+ OBJECT_NAME(@@PROCID) + ''. Stmt No.=1, Db=''+db_name()+'',Err=''+CONVERT(varchar(10),@Error)
		RAISERROR(@ErrStr,16,1)
		RETURN 1 /* statement failed */
	END

	/* now trim the max log size if found to be oversize */
	if (@max404LogSize > 0)
	BEGIN
		declare @maxRows int
		set @maxRows = @max404LogSize * 1.1 --actually lets it exceed by 10% before trimming
		if @maxRows < (select count(*) 
			from {databaseOwner}ifty_Site404Log
			where PortalId = @PortalId)
		BEGIN
			DELETE FROM {databaseOwner}ifty_Site404Log
			WHERE SequenceNum < (@sequenceNum - @max404LogSize)
		      AND PortalId = @PortalId
		END
	END

	/* finished procedure, commit and return */
	IF @TranCount = 0 COMMIT TRANSACTION T1
	IF @RowCount = 0
		RETURN -2	  /*** Procedure did nothing. Records committed */
	ELSE
		RETURN 0	  /*** Procedure executed ok. Records committed */
END

' 
END
GO

/****** Object:  StoredProcedure {databaseOwner}[ifty_GetSite404LogForPortal]    Script Date: 04/22/2010 15:26:37 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID(N'{databaseOwner}[ifty_GetSite404LogForPortal]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC sp_executesql @statement = N'CREATE Procedure {databaseOwner}[ifty_GetSite404LogForPortal]
(
	@portalId int
	,@startDateTime dateTime
	,@endDateTime dateTime
	,@pageNum int
	,@pageSize int
	
)
AS
BEGIN

/* =============================================
	Author:      natives\bruce
	Create date: 22/04/2010
	Description: Gets all Site404LogInfo records for a portal
   ============================================= 
	
	    Return Values
	    -2  - No records modified. Commit Occured
	    -1  - No record(s) returned. Procedure Executed Ok.
	    0  - Successful Execution.
	    1  - SQL Error. Rollback Occurred.
	    2  - No records modified. Rollback Occurred.
	    3  - Error in sub procedure - entire top procedure rolled back.
	    4+ - Specific to procedure
	
	    Modified by:		Date:		Reason for Modification:
	
	   =============================================*/

SET NOCOUNT ON 
DECLARE @ErrStr 	varchar(100)	/* Return error string				*/
DECLARE @Error		int		/* Return error value				*/
DECLARE @Rowcount	int		/* Return related row count			*/

declare @minRowNum int, @maxRowNum int, @maxRows int, @totalRows int, @totalPages int

	select @totalRows = Count(Site404Id)
	from {databaseOwner}ifty_Site404Log
	where PortalId = @portalId
	  and RequestDateTime between @startDateTIme and @endDateTime

	select @minRowNum = (@pageNum -1) * @pageSize + 1
	select @maxRowNum = @minRowNum + @pageSize
	set @maxRows = @pageSize * @pageNum
	set @totalPages = @totalRows / @pageSize + case when @totalRows % @pageSize > 0 then 1 else 0 end

	set rowcount @maxRows

	Create Table #sitelog (SIte404Id uniqueIdentifier, RowNumber int identity(1,1) NOT NULL)
	INSERT INTO #siteLog ( Site404Id)
	select Site404Id
	from {databaseOwner}ifty_Site404Log
	where PortalId = @portalId
	  and RequestDateTime between @startDateTIme and @endDateTime
	ORDER BY SequenceNum DESC

	set rowcount 0

	SELECT 
		  RowNumber
	   ,sl.Site404Id	
	   ,RequestDateTime	
	   ,SequenceNum	
	   ,Coalesce(sl.PortalId, -1) as PortalId
	   ,Coalesce(sl.PortalAliasId,-1) as PortalAliasId
	   ,Coalesce(Referer	,'''') as Referer
	   ,Coalesce(sl.Url	,'''') as Url
	   ,Coalesce(OriginalUrl,'''') as OriginalUrl
	   ,Coalesce(UserAgent,'''') as UserAgent
	   ,Coalesce(HostAddress,'''') as HostAddress
	   ,Coalesce(HostName,'''') as HostName
	   ,Coalesce(sl.TabId	,-1) as TabId
		,Coalesce(pa.HttpAlias,'''') as HttpAlias
		,Coalesce(t.TabName,'''') as TabName
	FROM {databaseOwner}ifty_Site404Log sl
	INNER JOIN #siteLog temp
		on temp.Site404Id = sl.Site404Id
	LEFT JOIN {databaseOwner}{objectQualifier}PortalAlias pa
		on pa.PortalAliasId = sl.POrtalALiasId
	left join {databaseOwner}{objectQualifier}Tabs t
		on sl.TabId = t.TabId
	where rowNumber between @minRowNum and @maxRowNum
	order by rowNumber
	
	SELECT @Error = @@ERROR, @RowCount = @@RowCount
	IF @Error <> 0
	BEGIN
		SELECT @ErrStr=''Error in ''+ OBJECT_NAME(@@PROCID) + ''. Stmt No.=1, Db=''+db_name()+'',Err=''+CONVERT(varchar(10),@Error)
		RAISERROR(@ErrStr,16,1)
		RETURN 1 /* statement failed */
	END

	select @totalRows as totalRows, @totalPages as totalPages, @minRowNum as MinRowNum, case when @maxRowNum < @totalRows then @totalRows else @maxRowNum end as MaxRowNum

	/* finished procedure, return value and exit */
	RETURN 0	  /*** Procedure executed ok. */
END

' 
END
GO


/* 736 onnewModule removed */
